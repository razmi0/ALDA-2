---
import Heading from "@/components/Hero/Heading.astro";
import rawProducts from "@/components/Products/product.json" assert { type: "json" };
import type { ProductType } from "@/components/Products/types";
// import Dialog from "@/components/Tarif/Dialog/Dialog.astro";
import Button from "@/components/Button.astro";
import MinimalPrice from "@/components/Products/MinimalPrice.astro";
import Inputs from "@/components/Tarif/Form/Inputs.astro";
import Message from "@/components/Tarif/Form/Message.astro";
import Orientation from "@/components/Tarif/Orientation.astro";
import Pictures from "@/components/Tarif/Pictures.astro";
import Stats from "@/components/Tarif/Stats.astro";
import TarifText from "@/components/Tarif/TarifText.astro";
import HeaderFooter from "@/layouts/HeaderFooter.astro";
import Section from "@/layouts/Section.astro";
import { ArrowDown, Backpack, CircleChevronRight, Gauge, Hourglass, MapPin } from "lucide-react";
import Layout from "../layouts/Layout.astro";
// import type { ProductType } from "@/components/Products/types";
import Title from "@/components/Tarif/Form/Title.astro";
// import type { HTMLAttributes } from "astro/types";
import Form from "@/components/Tarif/Form/Form.astro";
// import FormButtons from "@/components/Tarif/Form/FormButtons.astro";
// import SumUp from "@/components/Tarif/Form/SumUp.astro";
import CloseButton from "@/components/Tarif/Dialog/CloseButton.astro";
import ContactDetail from "@/components/Tarif/Dialog/ContactDetail.astro";
import Dialog from "@/components/Tarif/Dialog/Dialog.astro";
import { generateLorem } from "@/lib/utils";

const products = rawProducts.products as ProductType[];
---

<style>
  .debug-1 {
    @apply ring-1 ring-red-400;
  }
  .debug-2 {
    @apply ring-1 ring-green-400;
  }
  .debug-3 {
    @apply ring-1 ring-blue-400;
  }
  .debug-4 {
    @apply ring-1 ring-yellow-400;
  }
  .debug-5 {
    @apply ring-1 ring-purple-400;
  }
  .debug-6 {
    @apply ring-1 ring-pink-400;
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const getThem = <T extends HTMLElement>(s: string) => Array.from(document.querySelectorAll(s) as unknown as T[]);

    getThem<HTMLDialogElement>("dialog").forEach((dialog) => {
      const action = dialog.dataset.action as string;
      const key = action.split("#")[1];

      const openBtn = document.querySelector(`[data-action='open#${key}']`) as HTMLButtonElement;
      const closeBtns = getThem<HTMLButtonElement>(`[data-action='close#${key}']`);

      if (!openBtn || !closeBtns || !frames) console.error(`Missing DOM elements`);

      const close = () => {
        dialog.close();
        document.body.style.overflow = "auto";
      };

      const open = () => {
        dialog.showModal();
        document.body.style.overflow = "hidden";
      };

      openBtn.addEventListener("click", open);
      closeBtns.forEach((btn) => btn.addEventListener("click", close));
    });
  });

  // const translationX = (frames[0]?.clientWidth ?? 0) + gap; !multistep || !nextBtns || !prevBtns
  // multistep.dataset.framesize = `${translationX}`;
  // const gap = 50;
  // const dialogs = getThem("dialog") as HTMLDialogElement[];
  // const multistep = document.querySelector(`[data-is='multistep#${key}']`) as HTMLElement;
  // const stepIndicator = document.querySelector(`[data-picture='${key}']`) as HTMLElement;
  // --
  // const nextBtns = getThem<HTMLButtonElement>(`[data-action^='next#${key}']`)
  // const prevBtns = getThem<HTMLButtonElement>(`[data-action^='prev#${key}']`)
  // const frames = getThem(`[data-frame^='frame#${key}']`)

  // const handleNavigation = (direction: "prev" | "next", e: MouseEvent) => {
  //   /**
  //    * Update steps display
  //    */
  //   const target = e.currentTarget as HTMLButtonElement;
  //   const nextStep = target.dataset.step as string;
  //   stepIndicator.style.setProperty("--step", nextStep);

  //   const frameSize = (multistep as HTMLElement).dataset.framesize as string;
  //   const translationSize = parseInt(frameSize);
  //   const firstFrame = frames[0] as HTMLElement;
  //   const translationData = firstFrame.dataset.translation as string;
  //   const currentTranslation = parseInt(translationData) || 0;

  //   frames.forEach((frame) => {
  //     const nextMove =
  //       direction === "prev" ? currentTranslation + translationSize : currentTranslation - translationSize;
  //     frame.dataset.translation = `${nextMove}`;
  //     frame.style.transform = `translateX(${nextMove}px)`;
  //   });
  // };

  // (nextBtns as HTMLButtonElement[]).forEach((btn: HTMLButtonElement) =>
  //   btn.addEventListener("click", (e) => handleNavigation("next", e))
  // );

  // (prevBtns as HTMLButtonElement[]).forEach((btn: HTMLButtonElement) =>
  //   btn.addEventListener("click", (e) => handleNavigation("prev", e))
  // );
</script>

<Layout title="tarif">
  <HeaderFooter slot="header" />
  <Section>
    <Heading h2="Nos tarifs" h3="Composable et personalisable" className="">
      <div class="grow max-h-[10%]"></div>
      <ArrowDown size="32" />
    </Heading>
  </Section>
  <Section className={"vertical center container gap-72"}>
    {
      products.map((product, i) => {
        const orientation = i % 2 === 0 ? "ltr" : "rtl";
        return (
          <Orientation orientation={orientation} anchorId={`${product.id}`}>
            <section class="relative vertical w-fit h-full">
              <Pictures size={500} orientation={orientation} />
            </section>
            <section class="vertical w-fit h-full gap-7 items-start justify-evenly max-w-[50%]">
              <TarifText title={product.title} description={product.description.long} />
              <div class="grid grid-cols-2">
                <div class="vertical gap-1">
                  <Stats label="duration" type="none" stats={product.duration}>
                    <Hourglass slot="icon" />
                  </Stats>
                  <Stats label="dificulty" type="bar" stats={product.stats}>
                    <Gauge slot="icon" />
                  </Stats>
                  <Stats label="matÃ©riels" type="badge" stats={product.materials}>
                    <Backpack slot="icon" />
                  </Stats>
                  <Stats label="lieux" type="badge" stats={product.locations}>
                    <MapPin slot="icon" />
                  </Stats>
                  <Stats label="public" type="none" stats={product.public}>
                    <MapPin slot="icon" />
                  </Stats>
                </div>
                <div class="grid items-start justify-end">
                  <ul class="w-full">
                    <p class="font-semibold mb-2">Programme :</p>
                    {product.tasks.map((task) => (
                      <li class="w-full horizontal items-center gap-3 mb-1">
                        <CircleChevronRight className="stroke-1 h-4 w-4" />
                        <p class="full">{task}</p>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
              <Dialog product={product}>
                <>
                  <CloseButton key={product.id} />
                  <Form key={product.id} id={product.id}>
                    <Title>{product.name}</Title>
                    <div class="text-left">
                      <h4 class="text-xl">Contactez-nous</h4>
                      <div class={`horizontal items-center justify-between gap-5`}>
                        <p class="leading-5 max-w-[50ch] text-balance">{generateLorem(50)}</p>
                        <ContactDetail product={product} />
                      </div>
                    </div>
                    <Inputs product={product} />
                    <Message product={product} />
                  </Form>
                </>
              </Dialog>
              <div class="horizontal center gap-5">
                <Button data-action={`open#${product.id}`} dark size="lg">
                  S'inscrire
                </Button>
                <MinimalPrice price={product.price} unit={product.unit} />
              </div>
            </section>
          </Orientation>
        );
      })
    }
  </Section>

  <HeaderFooter slot="footer" as="footer" className="mt-32" />
</Layout>
