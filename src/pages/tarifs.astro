---
import Heading from "@/components/Hero/Heading.astro";
import Badge from "@/components/Products/Badge.astro";
import Bar from "@/components/Products/Bar.astro";
import rawProducts from "@/components/Products/product.json" assert { type: "json" };
import type { ProductType } from "@/components/Products/types";
import RandomImage from "@/components/RandomImage.astro";
import StarEmpty from "@/components/icons/StarEmpty.astro";
import StarFilled from "@/components/icons/StarFilled.astro";
import HeaderFooter from "@/layouts/HeaderFooter.astro";
import Section from "@/layouts/Section.astro";
import { ArrowDown } from "lucide-react";
import Layout from "../layouts/Layout.astro";
import Buttons from "@/components/Tarif/Buttons.astro";

const products = rawProducts.products as ProductType[];
---

<style>
  .debug-1 {
    @apply ring-1 ring-red-400;
  }
  .debug-2 {
    @apply ring-1 ring-green-400;
  }
  .debug-3 {
    @apply ring-1 ring-blue-400;
  }
  .debug-4 {
    @apply ring-1 ring-yellow-400;
  }
  .debug-5 {
    @apply ring-1 ring-purple-400;
  }
  .debug-6 {
    @apply ring-1 ring-pink-400;
  }
</style>

<script>
  // const navBtns = Array.from(document.querySelectorAll("button[data-id]")) as HTMLButtonElement[];
  const productSections = Array.from(document.querySelectorAll("section[data-id]")) as HTMLElement[];
  const outputEls = Array.from(document.querySelectorAll("output[data-action]")) as HTMLOutputElement[];

  const productButtons: Record<"add" | "remove", HTMLButtonElement[]> = {
    add: [],
    remove: [],
  };

  productSections.map((section) => {
    productButtons.remove.push(section.firstChild as HTMLButtonElement);
    productButtons.add.push(section.lastChild as HTMLButtonElement);
  });

  type OutputMapValue = [HTMLOutputElement, string];
  const outputs = new Map<string, OutputMapValue>();
  outputEls.map((element) => {
    const action = element.dataset.action;
    if (!action) return;
    const [id, price] = action.split("#") as [string, string];
    outputs.set(id, [element, price]);
  });

  /**
   * @description Map of product id and amount element display (span)
   */
  const amountEls = new Map<string, HTMLSpanElement>();
  productSections.map((section) => {
    const productId = section.dataset.id as string;
    const amountEl = section.children[1] as HTMLSpanElement;
    amountEls.set(productId, amountEl);
  });

  /**
   * @description Handle the estimation of the product with the add and remove buttons
   */
  const estimationHandler = (e: MouseEvent) => {
    const target = e.currentTarget as HTMLButtonElement;
    if (!target.dataset.action) return;

    const [actionType, id] = target.dataset.action.split("#") as [string, string];
    const amountEl = amountEls.get(id) as HTMLSpanElement;
    const [outputEl, price] = outputs.get(id) as OutputMapValue;

    if (!amountEl || !outputEl) return;

    const currentAmount = parseInt(amountEl.textContent || "1") || 1;
    const newAmount = actionType === "add" ? Math.max(currentAmount + 1, 1) : Math.max(currentAmount - 1, 1);
    const newPrice = newAmount * parseInt(price);
    amountEl.textContent = newAmount.toString();
    outputEl.textContent = newPrice.toString();
  };

  [productButtons.add, productButtons.remove].map((typedBtns) => {
    typedBtns.map((btn) => {
      btn.addEventListener("click", estimationHandler);
    });
  });
</script>

<Layout title="tarif">
  <HeaderFooter slot="header" />
  <Section>
    <Heading h2="Nos tarifs" h3="Composable et personalisable" className="text-black">
      <a href="#1" class="pointer-events-auto">
        <ArrowDown size="32" />
      </a>
    </Heading>
  </Section>
  <Section id={"1"} className={"horizontal center"} fixedHeight>
    <div class="m-10 w-full h-full horizontal">
      <div class="vertical rounded-tl-md rounded-bl-md w-4/12 h-5/6 gap-3 py-5">
        {
          products.map((product) => {
            return (
              <button
                class="vertical items-center justify-between mx-5 border rounded-md shadow-sm shadow-black/50 border-slate-600 hover:bg-slate-100 p-2 gap-3"
                data-id={`${product.id}`}
              >
                <div class="w-full horizontal items-center justify-between">
                  <h2>{product.name}</h2>
                  <p class="font-medium">
                    <span class="font-bold text-lg">
                      <small> €</small>
                      {product.price}
                    </span>
                    / {product.unit}
                  </p>
                </div>
                <div class="w-full h-full space-x-4 text-left">
                  {product.tags.map((tag) => {
                    return <Badge tag={tag} />;
                  })}
                </div>
              </button>
            );
          })
        }
      </div>
      <!-- SECTION RIGHT -->
      <!-- SECTION RIGHT -->
      <!-- SECTION RIGHT -->
      <!-- SECTION RIGHT -->
      <div class="w-9/12 h-4/6 overflow-hidden">
        {
          products.map((product) => {
            const stars = Array.from({ length: 5 }, (_, i) => {
              return i < parseInt(product.rating) ? StarFilled : StarEmpty;
            });
            return (
              <div class="w-full h-5/6 rounded-tr-md rounded-br-md horizontal items-center justify-start px-5 gap-5">
                <RandomImage seed={600} className="h-5/6 w-4/12" />
                <article class="vertical h-5/6 w-full gap-5">
                  <div class="vertical gap-2">
                    <h2> {product.title} </h2>
                    {/* TITRE */}
                    <div class="horizontal items-center justify-start">
                      {stars.map((Star) => {
                        return <Fragment>{<Star className={"h-4 w-4"} />}</Fragment>;
                      })}
                    </div>
                    {/* TITRE */}
                  </div>
                  {/* description */}
                  {/* description */}
                  <p>{product.description.long}</p>
                  {/* description */}
                  {/* STATS */}
                  <div class="horizontal-reverse justify-between">
                    <article class="w-full vertical max-w-[30%] py-4 px-6">
                      {product.stats.map((stat) => (
                        <Bar barSize={175} label={stat.label} value={stat.value} />
                      ))}
                    </article>
                    {/* STATS */}
                    {/* STATS */}
                    {/* CALC */}
                    {/* CALC */}
                    {/* CALC */}
                    <section class="vertical px-6 py-4 text-slate-700 w-fit">
                      <div class="font-semibold text-sm mb-2">
                        <span>Nombre de {product.unit} :</span>
                      </div>
                      <div class="horizontal center w-fit">
                        <Buttons product={product} />
                        <p class="font-medium ring-1 ring-slate-300 px-2">
                          <small> €</small>
                          <output class="font-bold text-lg" data-action={`${product.id}#${product.price}`}>
                            {product.price}
                          </output>
                        </p>
                      </div>
                    </section>
                  </div>{" "}
                  {/* CALC */}
                  {/* CALC */}
                  {/* CALC */}
                </article>
              </div>
            );
          })
        }
      </div>
    </div>
  </Section>
</Layout>
