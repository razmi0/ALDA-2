---
import Button from "@/components/Button.astro";
import Heading from "@/components/Hero/Heading.astro";
import MinimalPrice from "@/components/Products/MinimalPrice.astro";
import rawProducts from "@/components/Products/product.json" assert { type: "json" };
import type { ProductType } from "@/components/Products/types";
import CloseButton from "@/components/Tarif/Dialog/CloseButton.astro";
import Dialog from "@/components/Tarif/Dialog/Dialog.astro";
import Form from "@/components/Tarif/Form/Form.astro";
import FormHeading from "@/components/Tarif/Form/FormHeading.astro";
import Inputs from "@/components/Tarif/Form/Inputs.astro";
import Message from "@/components/Tarif/Form/Message.astro";
import Orientation from "@/components/Tarif/Orientation.astro";
import Pictures from "@/components/Tarif/Pictures.astro";
import Stats from "@/components/Tarif/Stats.astro";
import TarifText from "@/components/Tarif/TarifText.astro";
import HeaderFooter from "@/layouts/HeaderFooter.astro";
import Section from "@/layouts/Section.astro";
import { ArrowDown, Backpack, CircleChevronRight, Gauge, Hourglass, MapPin, type LucideProps } from "lucide-react";
import type { ForwardRefExoticComponent, RefAttributes } from "react";
import Layout from "../layouts/Layout.astro";

const products = rawProducts.products as ProductType[];

type StatsComponent = {
  label: string;
  type: "none" | "bar" | "badge";
  Icon?: ForwardRefExoticComponent<Omit<LucideProps, "ref"> & RefAttributes<SVGSVGElement>>;
  productKey: keyof ProductType;
};
const statsComponents: StatsComponent[] = [
  { label: "duration", type: "none", Icon: Hourglass, productKey: "duration" },
  { label: "dificulty", type: "bar", Icon: Gauge, productKey: "stats" },
  { label: "mat√©riels", type: "badge", Icon: Backpack, productKey: "materials" },
  { label: "lieux", type: "badge", Icon: MapPin, productKey: "locations" },
  { label: "public", type: "none", Icon: MapPin, productKey: "public" },
];
---

<script>
  document.addEventListener("astro:page-load", () => {
    const getThem = <T extends HTMLElement>(s: string) => Array.from(document.querySelectorAll(s) as unknown as T[]);

    getThem<HTMLDialogElement>("dialog").forEach((dialog) => {
      const action = dialog.dataset.action as string;
      const key = action.split("#")[1];

      const openBtn = document.querySelector(`[data-action='open#${key}']`) as HTMLButtonElement;
      const closeBtns = getThem<HTMLButtonElement>(`[data-action='close#${key}']`);

      if (!openBtn || !closeBtns) console.error(`Missing DOM elements`);

      const close = () => {
        dialog.close();
        document.body.style.overflow = "auto";
      };

      const open = () => {
        dialog.showModal();
        document.body.style.overflow = "hidden";
      };

      openBtn.addEventListener("click", open);
      closeBtns.forEach((btn) => btn.addEventListener("click", close));
    });
  });
</script>

<Layout title="tarif">
  <HeaderFooter slot="header" />
  <Section>
    <Heading h2="Nos tarifs" h3="Composable et personalisable" className="">
      <div class="grow max-h-[10%]"></div>
      <ArrowDown size="32" />
    </Heading>
  </Section>
  <Section className={"vertical center container gap-72"}>
    {
      products.map((product, i) => {
        const orientation = i % 2 === 0 ? "ltr" : "rtl";
        return (
          <Orientation orientation={orientation} anchorId={`${product.id}`}>
            <section class="relative vertical w-fit h-full">
              <Pictures size={500} orientation={orientation} />
            </section>
            <section class="vertical w-fit h-full gap-7 items-start justify-evenly max-w-[50%]">
              <TarifText title={product.title} description={product.description.long} />
              <div class="grid grid-cols-2">
                <div class="vertical gap-1">
                  {statsComponents.map((stat) => {
                    const { label, type, Icon, productKey } = stat;
                    return (
                      <Stats label={label} type={type} stats={product[productKey]}>
                        {Icon && <Icon slot="icon" />}
                      </Stats>
                    );
                  })}
                </div>
                <div class="grid items-start justify-end">
                  <ul class="w-full">
                    <p class="font-semibold mb-2">Programme :</p>
                    {product.tasks.map((task) => (
                      <li class="w-full horizontal items-center gap-3 mb-1">
                        <CircleChevronRight className="stroke-1 h-4 w-4" />
                        <p class="full">{task}</p>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
              <Dialog product={product}>
                <>
                  <CloseButton key={product.id} />
                  <Form key={product.id} id={product.id}>
                    <FormHeading product={product} />
                    <Inputs product={product} />
                    <Message product={product} />
                  </Form>
                </>
              </Dialog>
              <div class="horizontal center gap-5">
                <Button data-action={`open#${product.id}`} dark size="lg">
                  S'inscrire
                </Button>
                <MinimalPrice price={product.price} unit={product.unit} />
              </div>
            </section>
          </Orientation>
        );
      })
    }
  </Section>

  <HeaderFooter slot="footer" as="footer" className="mt-32" />
</Layout>
