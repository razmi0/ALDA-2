---
import type { HTMLAttributes } from "astro/types";
import Button from "../Button.astro";
import MultiHeader from "../Dialog/MultiHeader.astro";
import type { ProductType } from "../Products/types";
import CloseButton from "./CloseButton.astro";
import Form from "./Form.astro";
import Inputs from "./Inputs.astro";
import Message from "./Message.astro";
import Options from "./Options.astro";

interface Props {
  rest?: HTMLAttributes<"dialog">;
  product: ProductType;
  dialogSize?: number;
  gap?: number;
  frameSize?: number;
}

const { product, dialogSize = 800, frameSize = dialogSize - 100, gap = 50 } = Astro.props;
const key = product.id;
const components = [Inputs, Options, Message];
const sizes = {
  dialog: `${dialogSize}px`,
  gap: `${gap}px`,
  frameSize: `${frameSize}px`,
  translation: frameSize + gap,
};
---

<script>
  const dialogs = Array.from(document.querySelectorAll("[data-action*='dialog']")) as HTMLDialogElement[];
  if (!dialogs) throw new Error(`Missing dialog : ${dialog}`);
  dialogs.map((dialog) => {
    const key = dialog.dataset.action.split("#")[1];
    const open = document.querySelector(`[data-action='open#${key}']`) as HTMLButtonElement;
    const close = Array.from(dialog.querySelectorAll(`[data-action='close#${key}']`) as HTMLButtonElement[]);
    const form = document.querySelector(`[data-form='form#${key}']`) as HTMLFormElement;
    const multistep = dialog.querySelector(`[data-is='multistep#${key}']`) as HTMLElement;
    const translationSize = parseInt(multistep.dataset.framesize) || 0;
    const navBtns = {
      next: Array.from(dialog.querySelectorAll(`[data-action^='next#${key}']`) as HTMLButtonElement[]),
      prev: Array.from(dialog.querySelectorAll(`[data-action^='prev#${key}']`) as HTMLButtonElement[]),
    };

    for (const key in navBtns) {
      navBtns[key].map((btn: HTMLButtonElement) => {
        const action = btn.dataset.action as string;
        if (!action) throw new Error(`Missing action`);
        const [actiontype, id] = action.split("#") as ["prev" | "next", string, string];

        switch (actiontype) {
          case "prev":
            btn.addEventListener("click", () => {
              const frames = Array.from(dialog.querySelectorAll(`[data-frame^='frame#${id}']`));
              const currentTranlation = parseInt(frames[0].dataset.translation) || 0;
              frames.map((frame) => {
                const nextMove = currentTranlation + translationSize;
                frame.dataset.translation = `${nextMove}`;
                frame.style.transform = `translateX(${nextMove}px)`;
              });
            });
            break;

          case "next":
            btn.addEventListener("click", () => {
              const frames = Array.from(dialog.querySelectorAll(`[data-frame^='frame#${id}']`));
              const currentTranlation = parseInt(frames[0].dataset.translation) || 0;
              frames.map((frame) => {
                const nextMove = currentTranlation - translationSize;
                frame.dataset.translation = `${nextMove}`;
                frame.style.transform = `translateX(${nextMove}px)`;
              });
            });
            break;
        }
      });
    }

    if (!open || !close) {
      throw new Error(`Missing open : ${open} or close : ${close} or form : ${form}`);
    }

    open.addEventListener("click", () => dialog.showModal());
    close.map((btn) => btn.addEventListener("click", () => dialog.close()));
    form.addEventListener("submit", (e) => {
      e.preventDefault();
      const formData = new FormData(form);
      const data = Object.fromEntries(formData.entries());
      console.log(data);
      if (data.hp) {
        window.location = "/honey";
      }
    });
  });
</script>

<style define:vars={{ frameSize: sizes.frameSize, dialogMaxSize: sizes.dialog, gap: sizes.gap }}>
  [data-is^="multistep"] {
    @apply grid [&>section]:text-center [&>section]:vertical [&>section]:justify-between [&>section]:full overflow-hidden;
    grid-template-columns: repeat(3, var(--frameSize));
    gap: var(--gap);
  }
  dialog:modal {
    @apply ring-1 ring-stone-300 ring-offset-1 vertical px-10 py-10 bg-zinc-200 text-black shadow-md shadow-black/20 gap-10 rounded-md;
    max-width: var(--dialogMaxSize);
  }
  dialog::backdrop {
    @apply bg-black/40 backdrop-blur-[1px];
  }
</style>

<dialog {...Astro.props} data-action={`dialog#${key}`} class="overflow-hidden">
  <CloseButton key={key} />
  <MultiHeader />
  <Form key={key} id={product.id}>
    <div data-is={`multistep#${key}`} data-frameSize={sizes.translation}>
      <!-- COL 1 -->
      {
        components.map((Component, i) => {
          const isFirstIndex = i === 0;
          const isLastIndex = i === components.length - 1;
          return (
            <section class="p-5" data-frame={`frame#${key}`} data-translation="0">
              <Component product={product} />
              <div class="horizontal w-full justify-end items-center gap-5 mt-5">
                {!isFirstIndex && (
                  <Button data-action={`prev#${key}`} size="lg" className="w-fit" dark>
                    Précédent
                  </Button>
                )}
                {isLastIndex ? (
                  <Button type="submit" size="lg" className="w-fit" dark>
                    Valider
                  </Button>
                ) : (
                  <Button data-action={`next#${key}`} size="lg" className="w-fit" dark>
                    Suivant
                  </Button>
                )}
              </div>
            </section>
          );
        })
      }
    </div>
  </Form>
</dialog>
<Button data-action={`open#${key}`} dark size="lg">S'inscrire</Button>
