---
import type { HTMLAttributes } from "astro/types";
import { X } from "lucide-react";
import Button from "../Button.astro";
import type { ProductType } from "../Products/types";
import Inputs from "./Inputs.astro";
import Message from "./Message.astro";
import Options from "./Options.astro";
import MultiHeader from "../Dialog/MultiHeader.astro";

interface Props {
  rest?: HTMLAttributes<"dialog">;
  product: ProductType;
}

const { product } = Astro.props;
const key = product.id;
---

<script>
  const dialogs = Array.from(document.querySelectorAll("[data-action*='dialog']")) as HTMLDialogElement[];

  if (!dialogs) throw new Error(`Missing dialog : ${dialog}`);

  /**
   * Map<string, [dialog, open, [close[]], form]>
   */
  const dialogMaps = new Map<string, [HTMLDialogElement, HTMLButtonElement, [HTMLButtonElement[]], HTMLFormElement]>();

  dialogs.map((dialog) => {
    const key = dialog.dataset.action.split("#")[1];
    const open = document.querySelector(`dialog ~ [data-action='open#${key}']`) as HTMLButtonElement;
    const close = Array.from(dialog.querySelectorAll(`[data-action='close#${key}']`) as HTMLButtonElement[]);
    const form = document.querySelector(`dialog [data-form='form#${key}']`) as HTMLFormElement;

    if (!open || !close) {
      throw new Error(`Missing open : ${open} or close : ${close} or form : ${form}`);
    }

    open.addEventListener("click", () => dialog.showModal());
    close.map((btn) => btn.addEventListener("click", () => dialog.close()));
    form.addEventListener("submit", (e) => {
      e.preventDefault();
      const formId = form.dataset.form.split("#")[1] as string;
      if (formId !== key) window.location = "/honey";
      const formData = new FormData(form);
      const data = Object.fromEntries(formData.entries());
      console.log(data);
      if (data.hp) {
        window.location = "/honey";
      }
    });

    dialogMaps.set(key, [dialog, open, close, form]);
  });
</script>

<style>
  dialog:modal {
    @apply ring-1 ring-stone-300 ring-offset-1 vertical items-center justify-between px-10 py-10 bg-zinc-200 text-black shadow-md shadow-black/20 gap-10 rounded-md;
  }
  dialog::backdrop {
    @apply bg-black/40 backdrop-blur-[1px];
  }

  .hp {
    @apply hidden;
  }
</style>

<dialog {...Astro.props} data-action={`dialog#${key}`}>
  <button
    type="button"
    data-action={`close#${key}`}
    class="absolute right-0 top-0 mt-2 mr-2 text-zinc-600 hover:text-zinc-400 focus:text-zinc-400 focus-visible:text-zinc-400"
    ><X /></button
  >
  <MultiHeader />
  <form data-form={`form#${key}`}>
    <input type="hidden" name="product_id" value={product.id} />
    <label class="hp" for="hp">Hi honey !<input type="text" id="hp" name="hp" /></label>
    <!-- MULTISTEP -->
    <!-- MULTISTEP -->
    <style>
      [data-is="multistep"] {
        @apply grid center [&>section]:text-center [&>section]:vertical [&>section]:justify-between [&>section]:full gap-32;
        grid-template-columns: repeat(3, 800px);
      }
    </style>
    <div data-is="multistep">
      <!-- COL 1 -->
      {
        [Inputs, Options, Message].map((Component) => {
          return (
            <section>
              <Component product={product} />
              <div class="horizontal w-full justify-end items-center gap-5">
                <Button data-action={`prev#1`} size="lg" className="w-fit" dark>
                  Précédent
                </Button>
                <Button data-action={`next#1`} size="lg" className="w-fit" dark>
                  Suivant
                </Button>
              </div>
            </section>
          );
        })
      }
      <!-- <section>
        <Inputs product={product} />
        <Button data-action={`prev#1`} size="lg" dark>Précédent</Button>
        <Button data-action={`next#1`} size="lg" dark>Suivant</Button>
      </section>
      <section>
        <Options />
        <Button data-action={`prev#2`} size="lg" dark>Précédent</Button>
        <Button data-action={`next#2`} size="lg" dark>Suivant</Button>
      </section>
      <section>
        <Message key={product.id} />
        <Button data-action={`prev#3`} size="lg" dark>Précédent</Button>
        <Button type="submit" data-action={`close#${key}`} dark size="lg" autofocus>Envoyer</Button>
      </section> -->
    </div>
  </form>
</dialog>
<Button data-action={`open#${key}`} dark size="lg">S'inscrire</Button>
