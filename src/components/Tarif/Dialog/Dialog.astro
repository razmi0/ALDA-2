---
import Button from "@/components/Button.astro";
import type { ProductType } from "@/components/Products/types";
import type { HTMLAttributes } from "astro/types";
import CloseButton from "./CloseButton.astro";
import ContactDetail from "./ContactDetail.astro";
import Form from "./Form.astro";
import Inputs from "./Inputs.astro";
import Message from "./Message.astro";
import Options from "./Options.astro";
import { ArrowBigLeft, ArrowBigRight } from "lucide-react";

interface Props {
  rest?: HTMLAttributes<"dialog">;
  product: ProductType;
  dialogSize?: number;
  gap?: number;
  frameSize?: number;
  detailsSize?: number;
}

const {
  product,
  dialogSize = 800,
  frameSize = dialogSize * 0.7,
  detailsSize = dialogSize * 0.3,
  gap = 50,
} = Astro.props;
const key = product.id;
const components = [Inputs, Options, Message];
const sizes = {
  dialog: `${dialogSize}px`,
  gap: `${gap}px`,
  frameSize: `${frameSize}px`,
  translation: frameSize + gap,
};
---

<script>
  import { needDOM } from "@/lib/utils";
  document.addEventListener("astro:page-load", () => {
    const dialogs = needDOM<HTMLDialogElement[]>("dialog", { multiple: true });
    dialogs.map((dialog) => {
      const action = dialog.dataset.action as string;
      const key = action.split("#")[1];

      const selectors: [string, { multiple?: boolean } | undefined][] = [
        [`[data-action='open#${key}']`, { multiple: false }], // [0] HTMLButtonElement single
        [`[data-form='form#${key}']`, { multiple: false }], // [1] HTMLFormElement single
        [`[data-is='multistep#${key}']`, { multiple: false }], // [2] HTMLElement single
        [`[data-action='close#${key}']`, { multiple: true }], // [3] HTMLButtonElement multiple
        [`[data-action^='next#${key}']`, { multiple: true }], // [4] HTMLButtonElement multiple
        [`[data-action^='prev#${key}']`, { multiple: true }], // [5] HTMLButtonElement multiple
      ];

      const [arr_open, arr_form, arr_multistep, close, next, prev] = selectors.map((selector) =>
        needDOM<HTMLElement[]>(...selector)
      );
      const open = (arr_open as [HTMLButtonElement])[0];
      const form = (arr_form as [HTMLFormElement])[0];
      const multistep = (arr_multistep as [HTMLElement])[0];
      const navBtns = {
        next: next as HTMLButtonElement[],
        prev: prev as HTMLButtonElement[],
      };

      const frameSize = multistep.dataset.framesize as string;
      const translationSize = parseInt(frameSize) || 0;

      for (const key in navBtns) {
        navBtns[key as "next" | "prev"].map((btn: HTMLButtonElement) => {
          const action = btn.dataset.action as string;
          if (!action) throw new Error(`Missing action`);
          const [actiontype, id] = action.split("#") as ["prev" | "next", string, string];

          switch (actiontype) {
            case "prev":
              btn.addEventListener("click", () => {
                const frames = needDOM<HTMLElement[]>(`[data-frame^='frame#${id}']`, { multiple: true });
                const firstIndex = frames[0] as HTMLElement;
                const translationData = firstIndex.dataset.translation as string;
                const currentTranlation = parseInt(translationData) || 0;
                frames.map((frame) => {
                  const nextMove = currentTranlation + translationSize;
                  frame.dataset.translation = `${nextMove}`;
                  frame.style.transform = `translateX(${nextMove}px)`;
                });
              });
              break;

            case "next":
              btn.addEventListener("click", () => {
                const frames = needDOM<HTMLElement[]>(`[data-frame^='frame#${id}']`, { multiple: true });
                const firstIndex = frames[0] as HTMLElement;
                const translationData = firstIndex.dataset.translation as string;
                const currentTranlation = parseInt(translationData) || 0;
                frames.map((frame) => {
                  const nextMove = currentTranlation - translationSize;
                  frame.dataset.translation = `${nextMove}`;
                  frame.style.transform = `translateX(${nextMove}px)`;
                });
              });
              break;
          }
        });
      }

      if (!open || !close) {
        throw new Error(`Missing open : ${open} or close : ${close} or form : ${form}`);
      }

      open.addEventListener("click", () => dialog.showModal());
      close.map((btn) => btn.addEventListener("click", () => dialog.close()));
      form.addEventListener("submit", (e) => {
        e.preventDefault();
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());
        console.log(data);
        if (data.hp) {
          window.location.assign("/honey");
        }
      });
    });
  });
</script>

<style define:vars={{ frameSize: sizes.frameSize, dialogMaxSize: sizes.dialog, gap: sizes.gap }}>
  [data-is^="multistep"] {
    @apply grid [&>section]:text-center [&>section]:vertical [&>section]:justify-between [&>section]:full overflow-hidden h-full;
    grid-template-columns: repeat(3, var(--frameSize));
    gap: var(--gap);
  }
  dialog:modal {
    /* px-5 py-5 */
    @apply ring-1 ring-stone-300 ring-offset-1 horizontal bg-zinc-200 text-black shadow-md shadow-black/20 rounded-md;
    max-width: var(--dialogMaxSize);
  }
  dialog::backdrop {
    @apply bg-black/40 backdrop-blur-[1px];
  }
</style>

<dialog {...Astro.props} data-action={`dialog#${key}`} class="overflow-hidden">
  <ContactDetail product={product} size={detailsSize} />
  <Form key={key} id={product.id}>
    <div data-is={`multistep#${key}`} data-frameSize={sizes.translation}>
      <!-- COL 1 -->
      {
        components.map((Component, i) => {
          const isFirstIndex = i === 0;
          const isLastIndex = i === components.length - 1;
          return (
            <section
              class="transition-transform grid place-items-center p-10"
              data-frame={`frame#${key}`}
              data-translation="0">
              <Component product={product} />
              <div class="horizontal w-full justify-end items-center gap-5">
                {!isFirstIndex && (
                  <Button data-action={`prev#${key}`} size="md" variant="filled" leftIcon ring="sm">
                    <ArrowBigLeft className="stroke-1" slot="icon" />
                    Précédent
                  </Button>
                )}
                {isLastIndex ? (
                  <Button type="submit" size="md" className="horizontal justify-between" variant="filled" ring="sm">
                    Valider
                  </Button>
                ) : (
                  <Button data-action={`next#${key}`} size="md" variant="filled" rightIcon ring="sm">
                    Suivant
                    <ArrowBigRight className="stroke-1" slot="icon" />
                  </Button>
                )}
              </div>
            </section>
          );
        })
      }
    </div>
  </Form>
  <CloseButton key={key} />
</dialog>

<Button data-action={`open#${key}`} dark size="lg">S'inscrire</Button>
