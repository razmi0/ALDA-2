---
import Button from "@/components/Button.astro";
import type { ProductType } from "@/components/Products/types";
import type { HTMLAttributes } from "astro/types";
import CloseButton from "./CloseButton.astro";
import ContactDetail from "./ContactDetail.astro";
import Form from "../Form/Form.astro";
import FormButtons from "../Form/FormButtons.astro";
import Inputs from "../Form/Inputs.astro";
import Message from "../Form/Message.astro";
import Options from "../Form/Options.astro";

interface Props {
  rest?: HTMLAttributes<"dialog">;
  product: ProductType;
  dialogSize?: number;
  gap?: number;
  frameSize?: number;
  detailsSize?: number;
}

const {
  product,
  dialogSize = 800,
  frameSize = dialogSize * 0.7,
  detailsSize = dialogSize * 0.3,
  gap = 50,
} = Astro.props;
// --
const components = [Inputs, Options, Message];
// --
const key = product.id;
// --
const sizes = {
  dialog: `${dialogSize}px`,
  gap: `${gap}px`,
  frameSize: `${frameSize}px`,
  translation: frameSize + gap,
};
---

<script>
  import { needDOM } from "@/lib/utils";
  document.addEventListener("astro:page-load", () => {
    const dialogs = needDOM<HTMLDialogElement[]>("dialog", { multiple: true });
    dialogs.forEach((dialog) => {
      const action = dialog.dataset.action as string;
      const key = action.split("#")[1];

      const selectors: [string, { multiple?: boolean } | undefined][] = [
        [`[data-action='open#${key}']`, { multiple: false }], // [0] HTMLButtonElement single
        [`[data-is='multistep#${key}']`, { multiple: false }], // [1] HTMLElement single
        [`[data-action='close#${key}']`, { multiple: true }], // [2] HTMLButtonElement multiple
        [`[data-action^='next#${key}']`, { multiple: true }], // [3] HTMLButtonElement multiple
        [`[data-action^='prev#${key}']`, { multiple: true }], // [4] HTMLButtonElement multiple
        [`[data-picture='${key}']`, { multiple: false }], // [5] HTMLPictureElement single
      ];

      const [openBtn, multistep, closeBtns, nextBtns, prevBtns, stepIndicator] = selectors.map((selector) =>
        needDOM<HTMLElement[]>(...selector)
      );

      if (!openBtn || !multistep || !closeBtns || !nextBtns || !prevBtns) throw new Error(`Missing DOM elements`);

      const frameSize = multistep?.[0]?.dataset.framesize as string;
      const translationSize = parseInt(frameSize) || 0;

      const handleNavigation = (direction: "prev" | "next", e: MouseEvent) => {
        const frames = needDOM<HTMLElement[]>(`[data-frame^='frame#${key}']`, { multiple: true });
        /**
         * Update steps display
         */
        const target = e.currentTarget as HTMLButtonElement;
        const nextStep = target.dataset.step as string;
        stepIndicator?.[0]?.style.setProperty("--step", nextStep);

        const firstFrame = frames[0] as HTMLElement;
        const translationData = firstFrame.dataset.translation as string;
        const currentTranslation = parseInt(translationData) || 0;

        frames.forEach((frame) => {
          const nextMove =
            direction === "prev" ? currentTranslation + translationSize : currentTranslation - translationSize;
          frame.dataset.translation = `${nextMove}`;
          frame.style.transform = `translateX(${nextMove}px)`;
        });
      };

      (nextBtns as HTMLButtonElement[]).forEach((btn: HTMLButtonElement) =>
        btn.addEventListener("click", (e) => handleNavigation("next", e))
      );

      (prevBtns as HTMLButtonElement[]).forEach((btn: HTMLButtonElement) =>
        btn.addEventListener("click", (e) => handleNavigation("prev", e))
      );

      const open = openBtn[0] as HTMLButtonElement;
      open.addEventListener("click", () => dialog.showModal());
      (closeBtns as HTMLButtonElement[]).forEach((btn) => btn.addEventListener("click", () => dialog.close()));
    });
  });
</script>

<style define:vars={{ frameSize: sizes.frameSize, dialogMaxSize: sizes.dialog, gap: sizes.gap }}>
  [data-is^="multistep"] {
    @apply grid [&>section]:text-center [&>section]:vertical [&>section]:justify-between [&>section]:full overflow-hidden h-full;
    grid-template-columns: repeat(3, var(--frameSize));
    gap: var(--gap);
  }
  dialog:modal {
    /* px-5 py-5 */
    @apply ring-1 ring-stone-300 ring-offset-1 horizontal bg-zinc-200 text-black shadow-md shadow-black/20 rounded-md;
    max-width: var(--dialogMaxSize);
  }
  dialog::backdrop {
    @apply bg-black/40 backdrop-blur-[1px];
  }
</style>

<dialog {...Astro.props.rest} data-action={`dialog#${key}`} class="overflow-hidden">
  <ContactDetail product={product} size={detailsSize} />
  <Form key={key} id={product.id}>
    <div class="absolute top-0 w-full pointer-events-none -z-10">
      <h2 class="w-full text-left pl-5 py-2 bg-transparent text-lg text-slate-700">{product.name}</h2>
    </div>
    <div data-is={`multistep#${key}`} data-frameSize={sizes.translation}>
      {
        components.map((Component, i) => (
          <section
            class="transition-transform grid place-items-center p-10 pt-20"
            data-frame={`frame#${key}`}
            data-translation="0">
            <Component product={product} />
            <FormButtons step={i} key={key} isFirstIndex={i === 0} isLastIndex={i === components.length - 1} />
          </section>
        ))
      }
    </div>
  </Form>
  <CloseButton key={key} />
</dialog>

<Button data-action={`open#${key}`} dark size="lg">S'inscrire</Button>
