---
import type { ProductType } from "@/components/Products/types";

// import type { ProductType } from "@/components/Products/types";
// import type { HTMLAttributes } from "astro/types";
// import Inputs from "../Form/Inputs.astro";
// import Message from "../Form/Message.astro";
// import SumUp from "../Form/SumUp.astro";

interface Props {
  //   rest?: HTMLAttributes<"dialog">;
  className?: string;
  product: ProductType;
  //   // dialogSize?: number | string;
}

let { product, className } = Astro.props;
// const key = product.id;

// let frameSize, detailsSize;  dialogSize = 800

// const proportions = {
//   frame: 1,
//   detail: 0.3,
// };
// --
// const form = {
//   components: [Inputs, Message, SumUp],
//   size: function () {
//     return this.components.length;
//   },
// };
// --

// --

// let sizeUnit = "";
// let isTypeNumber = false;
// if (typeof dialogSize === "string") {
//   let sizeUnits: string[] = [];
//   let sizeValues: string[] = [];

//   dialogSize.split("").forEach((char) => (isNaN(parseInt(char)) ? sizeUnits.push(char) : sizeValues.push(char)));

//   sizeUnit = sizeUnits.join("");
//   const sizeValue = parseInt(sizeValues.join(""));

//   frameSize = frameSize ? frameSize : sizeValue * proportions.frame;
//   detailsSize = detailsSize ? detailsSize : sizeValue * proportions.detail;
// } else {
//   // dialogSize type number here
//   isTypeNumber = true;
//   frameSize = frameSize ? frameSize : dialogSize * proportions.frame;
//   detailsSize = detailsSize ? detailsSize : dialogSize * proportions.detail;
// }

// sizeUnit = isTypeNumber ? "px" : sizeUnit;

// const sizes = {
//   dialog: `${dialogSize}${isTypeNumber ? "px" : ""}`,
//   frameSize: `${frameSize}${sizeUnit}`,
//   unit: `${sizeUnit}`,
// };

// const steps = [
//   {
//     title: "Etape 1",
//     description: "Choisissez quand et pour combien de personne",
//   },

//   {
//     title: "Etape 2",
//     description: "Contactez-nous",
//   },
//   {
//     title: "Etape 3",
//     description: "RÃ©capitulatif",
//   },
// ];
---

<!-- <script>
  document.addEventListener("astro:page-load", () => {
    // const gap = 50;
    const dialogs = Array.from(document.querySelectorAll("dialog")) as HTMLDialogElement[];
    // const dialogMap = new Map<string, HTMLDialogElement>();

    dialogs.forEach((dialog) => {
      const action = dialog.dataset.action as string;
      const key = action.split("#")[1];

      const openBtn = document.querySelector(`[data-action='open#${key}']`) as HTMLButtonElement;
      const multistep = document.querySelector(`[data-is='multistep#${key}']`) as HTMLElement;
      const stepIndicator = document.querySelector(`[data-picture='${key}']`) as HTMLElement;
      // --
      const closeBtns = Array.from(document.querySelectorAll(`[data-action='close#${key}']`)) as HTMLButtonElement[];
      const nextBtns = Array.from(document.querySelectorAll(`[data-action^='next#${key}']`)) as HTMLButtonElement[];
      const prevBtns = Array.from(document.querySelectorAll(`[data-action^='prev#${key}']`)) as HTMLButtonElement[];
      const frames = Array.from(document.querySelectorAll(`[data-frame^='frame#${key}']`)) as HTMLElement[];

      if (!openBtn || !multistep || !closeBtns || !nextBtns || !prevBtns || !frames)
        throw new Error(`Missing DOM elements`);

      const handleNavigation = (direction: "prev" | "next", e: MouseEvent) => {
        /**
         * Update steps display
         */
        const target = e.currentTarget as HTMLButtonElement;
        const nextStep = target.dataset.step as string;
        stepIndicator.style.setProperty("--step", nextStep);

        const frameSize = (multistep as HTMLElement).dataset.framesize as string;
        const translationSize = parseInt(frameSize);
        const firstFrame = frames[0] as HTMLElement;
        const translationData = firstFrame.dataset.translation as string;
        const currentTranslation = parseInt(translationData) || 0;

        frames.forEach((frame) => {
          const nextMove =
            direction === "prev" ? currentTranslation + translationSize : currentTranslation - translationSize;
          frame.dataset.translation = `${nextMove}`;
          frame.style.transform = `translateX(${nextMove}px)`;
        });
      };

      (nextBtns as HTMLButtonElement[]).forEach((btn: HTMLButtonElement) =>
        btn.addEventListener("click", (e) => handleNavigation("next", e))
      );

      (prevBtns as HTMLButtonElement[]).forEach((btn: HTMLButtonElement) =>
        btn.addEventListener("click", (e) => handleNavigation("prev", e))
      );

      openBtn.addEventListener("click", () => {
        dialog.showModal();
        const translationX = (frames[0]?.clientWidth ?? 0) + gap;
        multistep.dataset.framesize = `${translationX}`;
      });
      (closeBtns as HTMLButtonElement[]).forEach((btn) => btn.addEventListener("click", () => dialog.close()));
    });
  });
</script>
 --><!-- <style define:vars={{}}>
  /* [data-is^="multistep"] { frameSize: sizes.frameSize, dialogMaxSize: sizes.dialog, Nsections: form.size() 
    @apply grid [&>section]:text-center [&>section]:vertical [&>section]:justify-between [&>section]:full overflow-hidden h-full;
    grid-template-columns: repeat(var(--Nsections), var(--frameSize));
    gap: 50px;
  } */
  dialog:modal {
    @apply ring-1 ring-stone-300 ring-offset-1 horizontal bg-zinc-200 text-black shadow-md shadow-black/20 rounded-md;
    max-width: var(--dialogMaxSize);
    height: 80vh;
  }
  dialog::backdrop {
    @apply bg-black/40 backdrop-blur-[1px];
  }
</style> --><!-- class="overflow-hidden" -->
<dialog data-action={`dialog#${product.id}`} class={`backdrop:bg-black/40 backdrop:backdrop-blur-sm rounded-md `}>
  <div
    class={`relative w-full ring-1 ring-stone-300 ring-offset-1 horizontal bg-zinc-200 text-black shadow-md shadow-black/20 rounded-md ${className}`}>
    <slot />
  </div>
  <!-- <ContactDetail product={product} size={`${detailsSize}${sizeUnit}`} steps={steps} />
  <Form key={key} id={product.id}>
    <Title>{product.name}</Title>
    <div data-is={`multistep#${key}`}>
      
      {
        form.components.map((Component, i) => (
          <section
            class="transition-transform grid place-items-center p-10 pt-20"
            data-frame={`frame#${key}`}
            data-translation="0">
            <Inputs product={product} />
            <Message product={product} />
            {/* <Component product={product} /> */}
            <FormButtons componentFor={Component.name.toLowerCase()} formSize={form.size()} step={i} key={key} />
          </section>
        ))
      }
      
    </div>
  </Form>
  <CloseButton key={key} /> -->
</dialog>
<!-- </dialog>
<div class="horizontal center gap-5">
  <Button data-action={`open#${key}`} dark size="lg">S'inscrire</Button>
  <MinimalPrice price={product.price} unit={product.unit} />
</div> -->
