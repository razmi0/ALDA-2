---
import { Ban, Send } from "lucide-react";
// import FormButtons from "./FormButtons.astro";
import Button from "@/components/Button.astro";

interface Props {
  key: string | number;
  id: string | number;
  className?: string;
}

const { id, key, className } = Astro.props;
---

<script>
  import { credibilyScore } from "@/lib/utils";

  type FormDataTarif = {
    date: string;
    email: string;
    hp: string;
    product_id: string;
    quantity_person: string;
    tel: string;
    textarea: string;
  };

  document.addEventListener("astro:page-load", () => {
    const forms = Array.from(document.querySelectorAll("form[data-form]")) as HTMLFormElement[];
    const infos = Array.from(document.querySelectorAll("[data-info][data-variant][data-type]")) as HTMLElement[];

    const infoMap = new Map<string, HTMLElement[]>();
    for (const info of infos) {
      const key = info.dataset.info?.split("#")[1] as string;
      if (infoMap.has(key)) {
        const currentElement = infoMap.get(key) as HTMLElement[];
        infoMap.set(key, [...currentElement, info]);
        continue;
      }
      infoMap.set(key, [info]);
    }

    const handleSubmit = (e: SubmitEvent) => {
      e.preventDefault();
      const form = e.target as HTMLFormElement;
      const formData = new FormData(form);
      const data = Object.fromEntries(formData.entries()) as FormDataTarif;
      if (data.hp) {
        window.location.assign("/honey");
        return;
      }
      //-- Add score to data
      const treatedData = { ...data, score: credibilyScore(data) } as FormDataTarif & { score: string };
      console.log(treatedData);
    };

    forms.forEach((form) => {
      form.addEventListener("submit", handleSubmit);
    });
  });
</script>

<style>
  .hp {
    @apply hidden;
  }
</style>

<form class={`h-full ${className}`} data-form={`form#${key}`} class="relative">
  <input type="hidden" name="product_id" value={id} />
  <label class="hp" for="hp">Hi honey !<input type="text" id="hp" name="hp" /></label>
  <section class="vertical items-start justify-center gap-14 p-20">
    <slot />
    <div class="horizontal gap-5 center w-full">
      <Button data-for={"form"} type="submit" size="md" variant="filled" rightIcon ring="sm">
        Valider
        <Send className="stroke-1 h-5 w-5 translate-y-[3px]" slot="icon" />
      </Button>
      <Button data-action={`close#${key}`} type={"button"} size="md" variant="danger" rightIcon>
        Annuler
        <Ban className="stroke-1 h-5 w-5 translate-y-[3px]" slot="icon" />
      </Button>
    </div>
  </section>
</form>
