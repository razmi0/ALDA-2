---
interface Props {
  key: string | number;
  id: string | number;
}

const { id, key } = Astro.props;
---

<script>
  import { credibilyScore } from "@/lib/utils";

  type FormDataTarif = {
    date: string;
    email: string;
    hp: string;
    product_id: string;
    quantity_person: string;
    tel: string;
    textarea: string;
  };
  type LabelsType = Record<string, Record<"label" | "value", string>>;

  const labels: LabelsType = {
    quantity_person: { label: "Vous avez réservé pour", value: "inherit" },
    date: { label: "Le", value: "inherit" },
    tel: { label: "Votre téléphone", value: "inherit" },
    email: { label: "Votre email", value: "inherit" },
    textarea: { label: "Votre message", value: "inherit" },
    // --
    hasMaterial: { label: "Vous amenez votre matériel ?", value: "Oui" },
    isPro: { label: "Vous êtes un professionnel ?", value: "Oui" },
    isParticular: { label: "Vous êtes un particulier ?", value: "Oui" },
    isCompany: { label: "Vous êtes une entreprise ?", value: "Oui" },
    hasDisability: { label: "Vous avez un handicap ?", value: "Oui" },
    isAssociation: { label: "Vous êtes une association ?", value: "Oui" },
    isAccompanist: { label: "Vous êtes un accompagnant ?", value: "Oui" },
    recontact: { label: "Vous souhaitez être recontacté ?", value: "Oui" },
  };

  document.addEventListener("astro:page-load", () => {
    const forms = Array.from(document.querySelectorAll("form[data-form]")) as HTMLFormElement[];
    const infos = Array.from(document.querySelectorAll("[data-info][data-variant][data-type]")) as HTMLElement[];

    const infoMap = new Map<string, HTMLElement[]>();
    for (const info of infos) {
      const key = info.dataset.info?.split("#")[1] as string;
      if (infoMap.has(key)) {
        const currentElement = infoMap.get(key) as HTMLElement[];
        infoMap.set(key, [...currentElement, info]);
        continue;
      }
      infoMap.set(key, [info]);
    }

    const handleSubmit = (e: SubmitEvent) => {
      e.preventDefault();
      const form = e.target as HTMLFormElement;
      const formData = new FormData(form);
      const data = Object.fromEntries(formData.entries()) as FormDataTarif;
      if (data.hp) {
        window.location.assign("/honey");
        return;
      }

      const key = data.product_id;
      /**
       * submitter is "message" or "sumup"
       * "message" => buildRecap
       * "sumup" => send to server
       */
      const submitter = e.submitter as HTMLButtonElement;
      const filteredKeys = ["product_id", "hp", "textarea"];

      if (submitter.getAttribute("data-for") === "message") {
        // buildRecap
        const rootRecap = document.querySelector(`[data-recap="recap#${key}"]`) as HTMLElement;
        const entries = Object.entries(data).filter(([key]) => !filteredKeys.includes(key));

        const sectionMessage = form.querySelector("section[data-is='recap-message']") as HTMLElement;
        if (sectionMessage) {
          sectionMessage.textContent = "";

          const spanLabel = document.createElement("span");
          spanLabel.className = "label";
          spanLabel.textContent = labels["textarea"]?.label ?? key;

          const pValue = document.createElement("p");
          pValue.className = "value";
          pValue.textContent = data.textarea;

          sectionMessage.appendChild(spanLabel);
          sectionMessage.appendChild(pValue);
        }

        rootRecap.textContent = "";

        const ul = document.createElement("ul");
        entries.forEach(([key, value]) => {
          const li = document.createElement("li");

          const spanLabel = document.createElement("span");
          spanLabel.className = "label";
          spanLabel.textContent = labels[key]?.label ?? key;

          const pValue = document.createElement("p");
          pValue.className = "value";
          pValue.textContent = labels[key]?.value === "inherit" ? value : labels[key]?.value ?? value;

          li.appendChild(spanLabel);
          li.appendChild(pValue);
          ul.appendChild(li);
        });

        rootRecap.appendChild(ul);
      }

      //-- Add score to data
      const treatedData = { ...data, score: credibilyScore(data) } as FormDataTarif & { score: string };
      console.log(treatedData);
    };

    forms.forEach((form) => {
      form.addEventListener("submit", handleSubmit);
    });
  });
</script>

<style>
  .hp {
    @apply hidden;
  }
</style>

<form data-form={`form#${key}`}>
  <input type="hidden" name="product_id" value={id} />
  <label class="hp" for="hp">Hi honey !<input type="text" id="hp" name="hp" /></label>
  <slot />
</form>
