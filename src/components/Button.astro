---
import { cn } from "@/lib/utils";
import type { HTMLAttributes } from "astro/types";
interface Props {
  variant?: "outline" | "filled";
  size?: "sm" | "md" | "lg";
  ring?: "sm" | "md" | "lg" | "xl";
  className?: string;
  dark?: boolean;
  value?: string;
  autofocus?: boolean;
  rest?: Omit<HTMLAttributes<"button">, "class">;
  type?: HTMLAttributes<"button">["type"];
  leftIcon?: boolean;
  rightIcon?: boolean;
  textClass?: string;
}

const {
  className,
  variant = "outline",
  dark,
  size,
  ring,
  value,
  autofocus,
  type = "button",
  rightIcon,
  leftIcon,
  textClass,
  ...rest
} = Astro.props;

let iconClass;
const hasIcon = Astro.slots.has("icon");
if (hasIcon) {
  iconClass = rightIcon ? "horizontal-reverse justify-between" : leftIcon ? "horizontal justify-between" : "";
}

const variants = {
  outline: {
    dark: "text-black dark:text-white hover:bg-slate-100 dark:hover:bg-slate-700",
    light: "text-white/95 dark:text-black/95 hover:bg-white/80 hover:dark:bg-black/80",
  },
  filled: {
    dark: "text-white/95 dark:text-vlack/95 bg-black dark:bg-white hover:bg-black/90 hover:dark:bg-white/90",
    light: "text-black dark:text-white dark:bg-black bg-white dark:hover:bg-black/80 hover:bg-white/80",
  },
  sizes: {
    sm: "px-3 py-1",
    md: "px-5 py-2",
    lg: "px-9 py-2",
    xl: "px-12 py-3",
  },
  rings: {
    sm: "ring-1",
    md: "ring-2",
    lg: "ring-4",
    xl: "ring-8",
    dark: "ring-black dark:ring-white",
    light: "ring-white/95 dark:ring-black/95 ",
  },
};
---

<button
  autofocus={autofocus}
  value={value}
  data-is="button"
  type={type}
  class={cn(
    "pointer-events-auto cursor-pointer select-none w-fit rounded-md font-semibold group disabled:pointer-events-none disabled:bg-neutral-300",
    variants[variant || "outline"][dark ? "dark" : "light"],
    variants.sizes[size || "md"],
    variants.rings[ring || "sm"],
    variants.rings[dark ? "dark" : "light"],
    iconClass,
    className
  )}
  {...rest}>
  <div
    class={cn(
      hasIcon &&
        "group-focus:opacity-100 group-hover:opacity-100 opacity-0 transition-all group-focus:translate-x-0 group-hover:translate-x-0",
      rightIcon ? "-translate-x-5" : leftIcon ? "translate-x-5" : ""
    )}>
    <slot name="icon" />
  </div>
  <div
    class={cn(
      "translate-y-[1px]",
      hasIcon && "transition-all",
      rightIcon
        ? "group-focus:-translate-x-1 group-hover:-translate-x-1 translate-x-3"
        : leftIcon
          ? "group-focus:translate-x-1 group-hover:translate-x-1 -translate-x-3"
          : "",
      textClass
    )}>
    <slot />
  </div>
</button>
