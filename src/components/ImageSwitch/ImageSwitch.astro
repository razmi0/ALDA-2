---
import { cn, isDev } from "@/lib/utils";
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";
import FallBack from "./screen/screen-img-1.png";

interface Props {
  alt: string;
  className?: string;
  uniqueKey: string;
}

const { alt, className, uniqueKey } = Astro.props;

let images = import.meta.glob<{ default: ImageMetadata }>(`/src/components/ImageSwitch/screen/*.png`);
---

<script>
  const btns = Array.from(
    document.querySelectorAll("button[data-key][data-image='screen-img']")!
  ) as HTMLButtonElement[];
  const images = Array.from(document.querySelectorAll(`[data-image='screen-img']`)) as HTMLImageElement[];
  btns.map((btn) => {
    btn.addEventListener("click", (e) => {
      const target = e.currentTarget as HTMLButtonElement;
      const targetKey = target.dataset.key;
      const keyedImages = images.filter((img) => img.dataset.key === targetKey);
      const visibleImg =
        keyedImages.find((img) => !img.classList.contains("hidden")) ?? (keyedImages[0] as HTMLImageElement);
      const visibleIdx = parseInt(visibleImg?.dataset.index ?? "0", 10);
      const nextIndex = visibleIdx + 1 >= keyedImages.length - 1 ? 0 : visibleIdx + 1;
      const nextImage = keyedImages[nextIndex];
      visibleImg.classList.add("hidden");
      if (nextImage) {
        nextImage.classList.remove("hidden");
      }
      if (btn.firstChild) {
        btn.firstChild.textContent = `Change ${targetKey} img (${nextIndex + 1}/${keyedImages.length - 1})`;
      }
    });
  });
</script>

{
  isDev &&
    Object.keys(images).map((imgPath, i) => {
      const img = images[imgPath]?.();
      return (
        <Image
          class={cn("pointer-events-none", i === 0 ? "" : "hidden", className)}
          data-image={`screen-img`}
          data-key={uniqueKey}
          data-index={i}
          src={img || FallBack}
          alt={alt}
        />
      );
    })
}
{
  isDev && (
    <button
      data-key={uniqueKey}
      data-image="screen-img"
      class="z-50 relative pointer-events-auto ms-2 mt-2 border border-white px-1 hover:bg-white/60"
    >
      <small class="text-white font-bold [text-shadow:0.05em_0_black,0_0.05em_black,-0.05em_0_black,0_-0.05em_black,-0.05em_-0.05em_black,-0.05em_0.05em_black,0.05em_-0.05em_black,0.05em_0.05em_black;]">
        Change img
      </small>
    </button>
  )
}
{!isDev && <Image class={cn("pointer-events-none", className)} src={FallBack} alt={alt} />}
