---
import { cn, isDev } from "@/lib/utils";
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";
import MainImg from "./screen/screen-img-1.png";

interface Props {
  alt: string;
  className?: string;
  uniqueKey: string;
  disabled?: boolean;
}

const { alt, className, uniqueKey, disabled = false } = Astro.props;

let loremPngs = import.meta.glob<{ default: ImageMetadata }>(`/src/components/Home/ImageSwitch/screen/*.png`);
let clientImgs = import.meta.glob<{ default: ImageMetadata }>(`/src/assets/client-imgs/*.jpg`);
let allImgs = { ...loremPngs, ...clientImgs };
---

<script>
  /**
   * Image switcher
   */

  document.addEventListener("astro:page-load", () => {
    const btns = Array.from(
      document.querySelectorAll("button[data-key][data-image='screen-img']")!
    ) as HTMLButtonElement[];
    const images = Array.from(document.querySelectorAll(`[data-image='screen-img']`)) as HTMLImageElement[];
    btns.forEach((btn) => {
      btn.addEventListener("click", (e) => {
        const target = e.currentTarget as HTMLButtonElement;
        const targetKey = target.dataset.key;
        const keyedImages = images.filter((img) => img.dataset.key === targetKey);
        const visibleImg =
          keyedImages.find((img) => !img.classList.contains("hidden")) ?? (keyedImages[0] as HTMLImageElement);
        const visibleIdx = parseInt(visibleImg?.dataset.index ?? "0", 10);
        const nextIndex = visibleIdx + 1 >= keyedImages.length - 1 ? 0 : visibleIdx + 1;
        const nextImage = keyedImages[nextIndex];
        visibleImg.classList.add("hidden");
        if (nextImage) {
          nextImage.classList.remove("hidden");
        }
        if (btn.firstChild) {
          btn.firstChild.textContent = `Change ${targetKey} img (${nextIndex + 1}/${keyedImages.length - 1})`;
        }
      });
    });
    /**
     * Text shadow switcher
     *
     */
    const textShadowBtns = Array.from(
      document.querySelectorAll("button[data-action='text-shadow']")
    ) as HTMLButtonElement[];
    textShadowBtns.forEach((btn) => {
      btn.addEventListener("click", () => {
        const parentElement = btn.parentElement?.parentElement;
        const textShadow =
          "[text-shadow:0.05em_0_black,0_0.05em_black,-0.05em_0_black,0_-0.05em_black,-0.05em_-0.05em_black,-0.05em_0.05em_black,0.05em_-0.05em_black,0.05em_0.05em_black;]";
        if (!parentElement) return;
        if (parentElement.classList.contains(textShadow)) {
          parentElement.classList.remove(textShadow);
          return;
        }
        parentElement.classList.add(textShadow);
      });
    });
  });
</script>

{
  isDev && !disabled &&
    Object.keys(allImgs).map((imgPath, i) => {
      const img = allImgs[imgPath]?.();
      return (
        <Image
          class={cn("pointer-events-none", i === 0 ? "" : "hidden", className)}
          data-image={`screen-img`}
          data-key={uniqueKey}
          data-index={i}
          src={img || MainImg}
          alt={alt}
        />
      );
    })
}
{
  isDev && !disabled && (
    <details class="ms-2 z-50 absolute top-0 right-0">
      <summary />
      <button
        data-key={uniqueKey}
        data-image="screen-img"
        class="z-50 relative pointer-events-auto  px-1 hover:bg-white/60 ">
        <small class=" text-white font-bold [text-shadow:0.05em_0_black,0_0.05em_black,-0.05em_0_black,0_-0.05em_black,-0.05em_-0.05em_black,-0.05em_0.05em_black,0.05em_-0.05em_black,0.05em_0.05em_black;]">
          Change img
        </small>
      </button>
      <button
        data-key={uniqueKey}
        data-action="text-shadow"
        class=" z-50 relative pointer-events-auto  px-1 hover:bg-white/60 ">
        <small class="text-white font-bold [text-shadow:0.05em_0_black,0_0.05em_black,-0.05em_0_black,0_-0.05em_black,-0.05em_-0.05em_black,-0.05em_0.05em_black,0.05em_-0.05em_black,0.05em_0.05em_black;]">
          text shadows
        </small>
      </button>
    </details>
  )
}
{!isDev || disabled && <Image class={cn("pointer-events-none", className)} src={MainImg} alt={alt} />}
