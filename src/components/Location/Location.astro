---
import TreeIcon from "@/components/icons/Tree.astro";
import Section from "@/layouts/Section.astro";
import { generateLorem } from "@/lib/utils";
import { ArrowLeft, ArrowRight } from "lucide-react";
import Article from "../Article.astro";
import RandomImage from "../RandomImage.astro";
import VerticalText from "../VerticalText.astro";
import LocationFigure from "./LocationExplorer/LocationFigure.astro";
import LocationMark from "./LocationExplorer/LocationMark.astro";
import data from "./LocationExplorer/location.json" assert { type: "json" };
import type { Location } from "./LocationExplorer/types";

const rawLocations = data.locations as Location[];

const navArticleWidth = "130px";
const navVisibleFrame = "120px";

const articleContentWidth = "450px";
const articleContentGap = "20px";
const translationWidth = articleContentWidth
  .concat(articleContentGap)
  .split("px")
  .filter((x) => x !== "")
  .reduce((acc, cur) => acc + parseInt(cur, 10), 0);

const totalPages = rawLocations.length;
const locations = rawLocations.map((loc, i) => {
  // page et labelpage at build time
  const page = i + 1;
  const labelPage = page < 10 ? `0${page}` : page;
  // for now we generate lorem article content
  const loremArticle = {
    title: generateLorem(5),
    paragraph1: generateLorem(30),
    paragraph2: generateLorem(40),
  };
  return {
    ...loc,
    page: page,
    labelPage: labelPage,
    selected: i === 0,
    article: loremArticle,
  };
});
---

<script>
  /**
   * MARKS PLACEMENT
   * ctn is sliced in a grid of 30x30 cells
   * location marks are placed in the grid according to their coordinates
   */

  const ctn = document.querySelector("#grid") as HTMLElement;
  const marks = Array.from(document.querySelectorAll("[data-coor]")) as HTMLElement[];

  const cells = 30;
  const dimensions = {
    width: ctn.clientWidth,
    height: ctn.clientHeight,
    cellWidth: Math.floor(ctn.clientWidth / cells),
    cellHeight: Math.floor(ctn.clientHeight / cells),
    update: function () {
      this.width = ctn.clientWidth;
      this.height = ctn.clientHeight;
      this.cellWidth = Math.floor(this.width / cells);
      this.cellHeight = Math.floor(this.height / cells);
    },
  };

  const placeMarks = (mark: HTMLElement) => {
    const [x, y] = (mark.dataset.coor as string).split(",").map((n) => parseInt(n)) as [number, number];
    mark.style.top = `${y * dimensions.cellHeight}px`;
    mark.style.left = `${x * dimensions.cellWidth}px`;
  };

  marks.map((mark) => placeMarks(mark));

  window.onresize = () => {
    dimensions.update();
    marks.map((mark) => placeMarks(mark));
  };

  /**
   * Button script
   */
  const buttons = Array.from(document.querySelectorAll("[data-is='map-nav']"));
  const frames = Array.from(document.querySelectorAll("[data-is='frame']")) as HTMLElement[];
  const translations = frames.map((frame) => parseInt(frame.dataset.translation as string, 10));

  const handler = (e: MouseEvent) => {
    const [action, currentTarget, totalPages] = (e.currentTarget as HTMLElement)?.dataset?.action
      ?.split("#")
      .map((x, i) => (i >= 1 ? parseInt(x) : x)) as [string, number, number];

    const targetIndex = action === "next" ? currentTarget + 1 : currentTarget - 1;
    const validTargetIndex = targetIndex > totalPages ? 1 : targetIndex < 1 ? totalPages : targetIndex;

    frames.map((frame, i) => {
      frame.style.transform = `translateX(-${(validTargetIndex - 1) * (translations[i] as number)}px)`;
    });

    marks.map((mark) => {
      const firstChild = mark.firstElementChild as HTMLElement;
      if (mark.dataset.index === validTargetIndex.toString()) {
        firstChild.classList.add("selected");
      } else {
        firstChild.classList.remove("selected");
      }
    });
  };

  buttons &&
    buttons.map((btn) => {
      btn.addEventListener("click", handler as EventListener);
    });
</script>

<style define:vars={{ totalPages, navArticleWidth, articleContentWidth }}>
  button > * {
    @apply h-5 w-5 opacity-90;
  }

  [data-is="frame"] {
    min-width: calc(var(--navArticleWidth) * var(--totalPages));
    transition: transform 0.3s;
  }

  [data-is="article-frame"] {
    min-width: calc(var(--articleContentWidth) * var(--totalPages));
    transition: transform 0.3s;
  }
</style>

<Section
  size="full"
  className="relative bg-map-dark text-white flex flex-col lg:flex-row items-center justify-start pt-36 lg:pt-0 gap-32"
>
  <VerticalText position="right" className="bottom-48">DÃ©couvrez des lieux uniques</VerticalText>
  <div class="relative h-full w-full horizontal center md:max-w-[900px] md:max-h-[700px] select-none">
    <LocationFigure>
      <div
        class="absolute top-0 left-1/4 overflow-x-hidden"
        style={`max-width: ${navVisibleFrame}; width: ${navVisibleFrame}; height: 100%;`}
      >
        <div class="horizontal" data-is="frame" data-translation={`${navArticleWidth}`}>
          {
            locations.map((loc) => {
              return (
                <article class={`vertical gap-3 justify-between`} style="min-width : var(--navArticleWidth);">
                  <div class="horizontal items-center justify-start w-fit gap-1 text-[0.95rem]">
                    <output class="tabular-nums text-white font-semibold">{loc.labelPage}</output>
                    <span class="text-white/90">/ {totalPages}</span>
                  </div>
                  <header>
                    <h3 class="text-2xl font-medium leading-3">{loc.title}</h3>
                    <small class="text-sm text-white/90 whitespace-nowrap w-full">{loc.subtitle}</small>
                  </header>
                  <nav class="horizontal items-center justify-start gap-2 mt-1">
                    <button
                      data-is="map-nav"
                      data-action={`prev#${loc.page}#${totalPages}`}
                      class="hover:[&>*]:text-white"
                    >
                      <ArrowLeft className="text-white/90" />
                    </button>
                    <button
                      data-is="map-nav"
                      data-action={`next#${loc.page}#${totalPages}`}
                      class="hover:[&>*]:text-white"
                    >
                      <ArrowRight className="text-white/90" />
                    </button>
                  </nav>
                </article>
              );
            })
          }
        </div>
      </div>
      <div id="grid" class="absolute-align full [&>div]:w-fit pointer-events-none">
        {
          locations.map((loc, i) => {
            return (
              <div class="horizontal center gap-2 absolute" data-coor={loc.coordinates} data-index={i + 1}>
                <LocationMark selected={loc.selected}>{loc.label || loc.title}</LocationMark>
              </div>
            );
          })
        }
      </div>
    </LocationFigure>
  </div>

  <div class="overflow-x-hidden h-full" style={`max-width: ${articleContentWidth}; width: ${articleContentWidth}`}>
    <div
      class="horizontal"
      data-is="frame"
      data-translation={`${translationWidth}`}
      style={`gap: ${articleContentGap}`}
    >
      {
        locations.map((loc) => {
          return (
            <article class="vertical items-start justify-center gap-10" style={`min-width :var(--articleContentWidth)`}>
              <Article
                title={loc.article.title}
                words1={loc.article.paragraph1}
                words2={loc.article.paragraph2}
                pClass={"text-[#a4b1d6] opacity-90"}
              >
                <TreeIcon />
              </Article>
              <figure class="h-full horizontal justify-end items-center mt-1 gap-4">
                <RandomImage />
                <RandomImage />
              </figure>
            </article>
          );
        })
      }
    </div>
  </div>
</Section>
